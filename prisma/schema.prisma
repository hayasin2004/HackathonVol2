// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int          @id @default(autoincrement())
  username    String       @unique
  email       String       @unique
  password    String
  description String?
  character   Character[]
  followings  Follow[]     @relation("Followings")
  followers   Follow[]     @relation("Followers")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now())
  playerData  PlayerData[] @relation("PlayerData")
}

model Character {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  parts     Json
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Follow {
  id           Int      @id @default(autoincrement())
  followingsId Int
  followersId  Int
  followings   User     @relation("Followings", fields: [followingsId], references: [id], onDelete: Cascade)
  followers    User     @relation("Followers", fields: [followersId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())

  @@unique([followersId, followingsId])
  @@index([followersId])
  @@index([followingsId])
}

model PlayerData {
  id       Int          @id @default(autoincrement())
  haveItem PlayerItem[] @relation("Item")
  player   User         @relation("PlayerData", fields: [playerId], references: [id], onDelete: Cascade)
  playerId Int
}

model PlayerItem {
  id       Int             @id @default(autoincrement())
  itemName String
  item     DefalutItemList @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId   Int
  player   PlayerData      @relation("Item", fields: [playerId], references: [id], onDelete: Cascade)
  playerId Int
}

model DefalutItemList {
  id              Int          @id @default(autoincrement())
  PlayerItem      PlayerItem[]
  itemName        String
  itemDescription String
  itemIcon        String?
}
