// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int          @id @default(autoincrement())
  username    String       @unique
  email       String       @unique
  password    String
  description String?
  character   Character[]
  followings  Follow[]     @relation("Followings")
  followers   Follow[]     @relation("Followers")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now())
  PlayerData  PlayerData[]
}

model Character {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  parts     Json
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Follow {
  id           Int      @id @default(autoincrement())
  followingsId Int
  followersId  Int
  followings   User     @relation("Followings", fields: [followingsId], references: [id], onDelete: Cascade)
  followers    User     @relation("Followers", fields: [followersId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())

  @@unique([followersId, followingsId])
  @@index([followersId])
  @@index([followingsId])
}

//
// model PlayerData {
//   id         Int          @id @default(autoincrement())
//   haveItem   PlayerItem[]
//   player     User         @relation("PlayerData", fields: [playerId], references: [id], onDelete: Cascade)
//   playerId   Int          @unique
//   createdAt  DateTime     @default(now())
//   updatedAt  DateTime     @default(now())
//   User       User?        @relation(fields: [userId], references: [id])
//   userId     Int?
//   PlayerItem PlayerItem[]
//   PlayerItem PlayerItem[]
// }
//
// model PlayerItem {
//   id              Int              @id @default(autoincrement())
//   itemList        Int
//   quantity        Int              @default(1)
//   createdAt       DateTime         @default(now())
//   updatedAt       DateTime         @default(now())
//   playerData      PlayerData       @relation("PlayerData", fields: [playerDataId], references: [playerId], onDelete: Cascade)
//   playerDataId    Int
//   DefaultItemList DefaultItemList? @relation(fields: [itemList], references: [id], onDelete: Cascade)
//   PlayerData      PlayerData       @relation(fields: [playerDataId], references: [id])
// }
//
// model DefaultItemList {
//   id              Int          @id @default(autoincrement())
//   PlayerItem      PlayerItem[]
//   itemName        String
//   itemDescription String
//   itemIcon        String?
//   x               Int
//   y               Int
//   width           Int
//   height          Int
//   createdAt       DateTime     @default(now())
//   updatedAt       DateTime     @default(now())
// }

model PlayerData {
  id        Int          @id @default(autoincrement())
  playerId  Int?         @unique // Userモデルから取得したID（一意）
  player    User?        @relation(fields: [playerId], references: [id], onDelete: Cascade) // Userモデルとのリレーション
  haveItems PlayerItem[] @relation("PlayerToItems") // Playerが所持しているアイテムのリレーション
  createdAt DateTime     @default(now())
  updatedAt DateTime     @default(now())
}

model PlayerItem {
  id              Int              @id @default(autoincrement())
  playerDataId    Int // PlayerData外部キー
  itemId          Int // DefaultItemList外部キー
  quantity        Int              @default(1) // 所持数
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now())
  playerData      PlayerData       @relation("PlayerToItems", fields: [playerDataId], references: [playerId], onDelete: Cascade) // PlayerDataリレーション
  DefaultItemList DefaultItemList? @relation(fields: [itemId], references: [id], onDelete: Cascade) // DefaultItemListリレーション
}

model DefaultItemList {
  id              Int          @id @default(autoincrement())
  itemName        String // アイテム名
  itemDescription String // アイテムの説明
  itemIcon        String? // アイテムのアイコン
  x               Int // x軸の座標
  y               Int // y軸の座標
  width           Int // アイテムの幅
  height          Int // アイテムの高さ
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @default(now())
  PlayerItems     PlayerItem[] // PlayerItemとのリレーション
}
