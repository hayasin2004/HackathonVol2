// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int          @id @default(autoincrement())
  username    String       @unique
  email       String       @unique
  password    String
  description String?
  character   Character[]
  followings  Follow[]     @relation("Followings")
  followers   Follow[]     @relation("Followers")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now())
  PlayerData  PlayerData[]
  RoomItem    RoomItem[]
}

model Character {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  parts     Json
  userId    Int
  iconImage String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Follow {
  id           Int      @id @default(autoincrement())
  followingsId Int
  followersId  Int
  followings   User     @relation("Followings", fields: [followingsId], references: [id], onDelete: Cascade)
  followers    User     @relation("Followers", fields: [followersId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())

  @@unique([followersId, followingsId])
  @@index([followersId])
  @@index([followingsId])
}

model PlayerData {
  id        Int          @id @default(autoincrement())
  playerId  Int?         @unique
  player    User?        @relation(fields: [playerId], references: [id], onDelete: Cascade)
  haveItems PlayerItem[] @relation("PlayerToItems")
  x         Int          @default(64)
  y         Int          @default(64)
  roomId    Int?
  room      Room?        @relation("RoomPlayers", fields: [roomId], references: [id])
  createdAt DateTime     @default(now())
  updatedAt DateTime     @default(now())
  hp        Int          @default(5)
  attack    Int          @default(1)
  defense   Int          @default(1)
  level     Int          @default(1)
}

model PlayerItem {
  id              Int              @id @default(autoincrement())
  playerDataId    Int
  itemId          Int
  quantity        Int              @default(1)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now())
  playerData      PlayerData       @relation("PlayerToItems", fields: [playerDataId], references: [id], onDelete: Cascade)
  DefaultItemList DefaultItemList? @relation(fields: [itemId], references: [id], onDelete: Cascade)
}

model DefaultItemList {
  id              Int                 @id @default(autoincrement())
  itemName        String
  itemDescription String
  itemIcon        String[]
  x               Int?
  y               Int?
  width           Int?
  height          Int?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  CraftedItems    CraftItem[]         @relation("CreatedItem")
  UsedInRecipes   CraftItemMaterial[] @relation("MaterialItem")
  PlayerItem      PlayerItem[]
  RoomItem        RoomItem[]
  TradeItems      NPCTrade[]          @relation("TradeItems") // 既存のリレーション
  EnemyDropItem   EnemyDropItem[]
  CostItems       NPCTrade[]          @relation("CostItems") // 逆方向のリレーションを追加
  NPCTrade        NPCTrade[]
}

model CraftItem {
  id            Int                 @id @default(autoincrement())
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @default(now())
  craftItemIcon String?
  createdItemId Int
  createdItem   DefaultItemList     @relation("CreatedItem", fields: [createdItemId], references: [id], onDelete: Cascade)
  materials     CraftItemMaterial[]
}

model CraftItemMaterial {
  id             Int             @id @default(autoincrement())
  craftItemId    Int
  materialItemId Int
  quantity       Int
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @default(now())
  craftItem      CraftItem       @relation(fields: [craftItemId], references: [id], onDelete: Cascade)
  materialItem   DefaultItemList @relation("MaterialItem", fields: [materialItemId], references: [id], onDelete: Cascade)
}

model Room {
  id        Int          @id @default(autoincrement())
  name      String
  players   PlayerData[] @relation("RoomPlayers")
  items     RoomItem[]   @relation("RoomItems")
  createdAt DateTime     @default(now())
  updatedAt DateTime     @default(now())
}

model RoomItem {
  id        Int             @id @default(autoincrement())
  roomId    Int
  itemId    Int
  x         Int
  y         Int
  width     Int?            @default(64)
  height    Int?            @default(64)
  iconImage String
  user      User?           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int?
  isActive  Boolean         @default(true)
  room      Room            @relation("RoomItems", fields: [roomId], references: [id], onDelete: Cascade)
  item      DefaultItemList @relation(fields: [itemId], references: [id])
  createdAt DateTime        @default(now())
  updatedAt DateTime        @default(now())
}

model NPC {
  id          Int        @id @default(autoincrement())
  name        String
  x           Int
  y           Int
  width       Int?       @default(64)
  height      Int?       @default(64)
  images      String[]
  dialogues   String[]
  stageStatus Int
  quests      Quest[]    @relation("NPCQuests")
  trades      NPCTrade[] @relation("NPCTrades")
}

model NPCTrade {
  id                Int              @id @default(autoincrement())
  npc               NPC              @relation("NPCTrades", fields: [npcId], references: [id])
  npcId             Int
  costItem          Int
  costItemRef       DefaultItemList  @relation("CostItems", fields: [costItem], references: [id], onDelete: Cascade)
  cost              Int              @default(1)
  item              DefaultItemList  @relation("TradeItems", fields: [itemId], references: [id])
  itemId            Int
  quantity          Int              @default(10)
  DefaultItemList   DefaultItemList? @relation(fields: [defaultItemListId], references: [id])
  defaultItemListId Int?
}

model Quest {
  id   Int    @id @default(autoincrement())
  name String
  npcs NPC[]  @relation("NPCQuests")
}

model Enemy {
  id              Int             @id @default(autoincrement())
  name            String
  x               Int
  y               Int
  width           Int?            @default(64)
  height          Int?            @default(64)
  images          String[]
  dialogues       String[]
  hp              Int?            @default(5)
  attack          Int?            @default(2)
  damage          Int
  movementPattern Json
  stageStatus     Int
  dropItems       EnemyDropItem[]
}

model EnemyDropItem {
  id       Int             @id @default(autoincrement())
  enemy    Enemy           @relation(fields: [enemyId], references: [id], onDelete: Cascade)
  enemyId  Int
  item     DefaultItemList @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId   Int
  dropRate Float           @default(1.0) // ドロップ率（100% = 1.0）
}
